# -*- coding: utf-8 -*-
"""Oauth2.0 flow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11xBp3-DiRvOLuKYXyBBxWGe_GrH3d6hB

#Google Oauth 2.0 flow
"""
# google-api-python-client
from googleapiclient.discovery import build

import requests
import json
from google.oauth2.credentials import Credentials

"""API configuration"""

CLIENT_SECRETS_FILE = 'client_secret.json'
API_SERVICE_NAME = 'youtube'
API_VERSION = 'v3'

"""getting `client_id` and `client_secret` from google"""

# reading client_id file
f = open(CLIENT_SECRETS_FILE,'rb')
client_secret_creds = json.load(f)
f.close()
print(client_secret_creds)

"""creating url to authenticate account."""

# first we have to verify our account by sending a request to auth_uri
# it will authorize the account and generate a code to generate access token
client_id = client_secret_creds['installed']['client_id']
client_secret = client_secret_creds['installed']['client_secret']
auth_uri="https://accounts.google.com/o/oauth2/auth"
token_uri="https://oauth2.googleapis.com/token"
scopes = ["https://www.googleapis.com/auth/youtube.force-ssl"]
redirect_uri="urn:ietf:wg:oauth:2.0:oob"
# url to get code
url = f"{auth_uri}?client_id={client_id}&redirect_uri={redirect_uri}&scope={scopes[0]}&response_type=code"
print(url)

"""read access_code from file"""

# account authentication code.
code = '4/1AX4XfWj5QiN3H5YVJe0SN3vVn54C9j1EFTC8TzWgrDiKfCQIFsjK59PyDJU' 
print(code)

"""getting `refresh_token` and `access_token` from google auth server.

"""

# get refresh token and access token.


access_token ,refresh_token = get_tokens(code, client_id, client_secret)

print(access_token[:40],'\n', refresh_token[:40])

"""renew `access_token` using `refresh_token`"""

def get_refresh_token(client_id, client_secret,refresh_token):
    payload = {'client_id':client_id,
               'client_secret':client_secret,
               'refresh_token':refresh_token,
               'grant_type':'refresh_token'}
    auth_uri="https://accounts.google.com/o/oauth2/token"
    token_response = requests.post(auth_uri,payload)
    token = json.loads(token_response.content.decode('utf-8'))
    return token['access_token']

access_token = get_refresh_token(client_id, client_secret,refresh_token)

"""List video comments"""

def list_video_comments(video_id, access_token, maxResults = 10):
  url = "https://youtube.googleapis.com/youtube/v3/commentThreads"
  params = {
      "part":"snippet,replies",
      "videoId":video_id,
      "maxResults":maxResults}
  headers = {"Authorization": "Bearer "+access_token}
  response = requests.get(url, headers=headers, params=params)
  if response.status_code in [400,401]:
      print("error in authenticate")
      try:
          error_msg = response.json()['error']['message']
      except:
          error_msg = "unknown"
      print(error_msg)
      print('trying refresh token')
      return None
  else:
      return response.json()

comments = list_video_comments('rZNCos_Qq2g', access_token)

import json
print(json.dumps(comments, indent = 3))

def insert_comment(video_id, comment_text, access_token):
  """Insert comment in video

  """

#   body={
#     "snippet": {
# #            "channelId": "UCkUq-s6z57uJFUFBvZIVTyg",
#       "videoId": video_id,
#       "topLevelComment": {
#         "snippet": {
#           "textOriginal": comment_text
#         }
#       }
#     }
#   }
  body=json.dumps({"snippet":{"videoId":video_id,"topLevelComment":{"snippet":{"textOriginal":comment_text}}}})
  headers = {
      "Authorization": "Bearer "+ access_token,
      "Accept": "application/json",
      "Content-Type": "application/json"
      }
  url = "https://youtube.googleapis.com/youtube/v3/commentThreads?part=snippet"
  r = requests.post(url=url, data=body, headers=headers)
  return r.json()

video_id = 'rZNCos_Qq2g'
comment_text = 'amazing and new type of fight wow'
response = insert_comment(video_id, comment_text, access_token)

print(json.dumps(response, indent =3 ))

def delete_comment(comment_id, access_token):
  """delete comment from video.

  """

  headers = {
      "Authorization": "Bearer "+ access_token,
      "Accept": "application/json",
      "Content-Type": "application/json"
      }
  url = f"https://youtube.googleapis.com/youtube/v3/comments?id={comment_id}"
  r = requests.delete(url=url, headers=headers)
  if r.status_code == 204:
    print('successful')
  else:
    print('failed')
  return r

comment_id = "UgyQ20NJelXAsL9EYs54AaABAg"
response = delete_comment(comment_id, access_token)
print(response)

def reply_comment(comment_id, reply_text, access_token):
  """reply a comment in video

  """

  body=json.dumps(
      {"snippet":{
          "parentId":comment_id,
          "textOriginal":reply_text
          }}
    )
  headers = {
      "Authorization": "Bearer "+ access_token,
      "Accept": "application/json",
      "Content-Type": "application/json"
      }
  url = "https://youtube.googleapis.com/youtube/v3/comments?part=snippet"
  r = requests.post(url=url, data=body, headers=headers)
  return r.json()